//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Archetype.Framework/Parsing/CardGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CardGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, ZONE=7, NUMBER=8, STRING=9, 
		ANY=10, WS=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "ZONE", "NUMBER", "STRING", 
		"ANY", "WORD", "DIGIT", "WS"
	};


	public CardGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CardGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "','", "':'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "ZONE", "NUMBER", "STRING", 
		"ANY", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CardGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CardGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,76,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,3,6,50,8,6,1,7,4,7,53,8,7,11,7,12,7,54,1,8,1,8,1,8,1,8,1,9,1,9,1,10,
		4,10,64,8,10,11,10,12,10,65,1,11,1,11,1,12,4,12,71,8,12,11,12,12,12,72,
		1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,0,23,
		0,25,11,1,0,3,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,
		32,77,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,25,1,0,0,
		0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,
		37,1,0,0,0,13,49,1,0,0,0,15,52,1,0,0,0,17,56,1,0,0,0,19,60,1,0,0,0,21,
		63,1,0,0,0,23,67,1,0,0,0,25,70,1,0,0,0,27,28,5,59,0,0,28,2,1,0,0,0,29,
		30,5,40,0,0,30,4,1,0,0,0,31,32,5,41,0,0,32,6,1,0,0,0,33,34,5,44,0,0,34,
		8,1,0,0,0,35,36,5,58,0,0,36,10,1,0,0,0,37,38,5,124,0,0,38,12,1,0,0,0,39,
		40,5,104,0,0,40,41,5,97,0,0,41,42,5,110,0,0,42,50,5,100,0,0,43,44,5,116,
		0,0,44,45,5,97,0,0,45,46,5,114,0,0,46,47,5,103,0,0,47,48,5,101,0,0,48,
		50,5,116,0,0,49,39,1,0,0,0,49,43,1,0,0,0,50,14,1,0,0,0,51,53,3,23,11,0,
		52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,16,1,0,0,0,
		56,57,5,34,0,0,57,58,3,21,10,0,58,59,5,34,0,0,59,18,1,0,0,0,60,61,3,21,
		10,0,61,20,1,0,0,0,62,64,7,0,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,
		0,0,65,66,1,0,0,0,66,22,1,0,0,0,67,68,7,1,0,0,68,24,1,0,0,0,69,71,7,2,
		0,0,70,69,1,0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,74,1,0,
		0,0,74,75,6,12,0,0,75,26,1,0,0,0,5,0,49,54,65,72,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
