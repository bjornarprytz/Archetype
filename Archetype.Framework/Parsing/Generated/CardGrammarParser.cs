//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Archetype.Framework/Parsing/CardGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CardGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, ZONE=7, NUMBER=8, STRING=9, 
		ANY=10, WS=11;
	public const int
		RULE_actionBlock = 0, RULE_effect = 1, RULE_keyword = 2, RULE_operand = 3, 
		RULE_targetSelector = 4, RULE_filterList = 5, RULE_filter = 6, RULE_filterKey = 7, 
		RULE_filterValue = 8;
	public static readonly string[] ruleNames = {
		"actionBlock", "effect", "keyword", "operand", "targetSelector", "filterList", 
		"filter", "filterKey", "filterValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "','", "':'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "ZONE", "NUMBER", "STRING", 
		"ANY", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CardGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CardGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CardGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CardGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ActionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EffectContext[] effect() {
			return GetRuleContexts<EffectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EffectContext effect(int i) {
			return GetRuleContext<EffectContext>(i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ANY) {
				{
				{
				State = 18;
				effect();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetSelectorContext[] targetSelector() {
			return GetRuleContexts<TargetSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TargetSelectorContext targetSelector(int i) {
			return GetRuleContext<TargetSelectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(Context, State);
		EnterRule(_localctx, 2, RULE_effect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			keyword();
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ZONE) {
				{
				{
				State = 25;
				targetSelector();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NUMBER || _la==STRING) {
				{
				{
				State = 31;
				operand();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(CardGrammarParser.ANY, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 4, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CardGrammarParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CardGrammarParser.STRING, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 6, RULE_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(CardGrammarParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterListContext filterList() {
			return GetRuleContext<FilterListContext>(0);
		}
		public TargetSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_targetSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterTargetSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitTargetSelector(this);
		}
	}

	[RuleVersion(0)]
	public TargetSelectorContext targetSelector() {
		TargetSelectorContext _localctx = new TargetSelectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_targetSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(ZONE);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 44;
				Match(T__1);
				State = 45;
				filterList();
				State = 46;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext[] filter() {
			return GetRuleContexts<FilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public FilterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterFilterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitFilterList(this);
		}
	}

	[RuleVersion(0)]
	public FilterListContext filterList() {
		FilterListContext _localctx = new FilterListContext(Context, State);
		EnterRule(_localctx, 10, RULE_filterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			filter();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 51;
				Match(T__3);
				State = 52;
				filter();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterKeyContext filterKey() {
			return GetRuleContext<FilterKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterValueContext filterValue() {
			return GetRuleContext<FilterValueContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 12, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			filterKey();
			State = 59;
			Match(T__4);
			State = 60;
			filterValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(CardGrammarParser.ANY, 0); }
		public FilterKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterFilterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitFilterKey(this);
		}
	}

	[RuleVersion(0)]
	public FilterKeyContext filterKey() {
		FilterKeyContext _localctx = new FilterKeyContext(Context, State);
		EnterRule(_localctx, 14, RULE_filterKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(CardGrammarParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(CardGrammarParser.ANY, i);
		}
		public FilterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.EnterFilterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICardGrammarListener typedListener = listener as ICardGrammarListener;
			if (typedListener != null) typedListener.ExitFilterValue(this);
		}
	}

	[RuleVersion(0)]
	public FilterValueContext filterValue() {
		FilterValueContext _localctx = new FilterValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_filterValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(ANY);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 65;
				Match(T__5);
				State = 66;
				Match(ANY);
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,73,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,1,1,1,5,1,27,8,1,10,1,12,
		1,30,9,1,1,1,5,1,33,8,1,10,1,12,1,36,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,3,4,49,8,4,1,5,1,5,1,5,5,5,54,8,5,10,5,12,5,57,9,5,1,6,1,
		6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,5,8,68,8,8,10,8,12,8,71,9,8,1,8,0,0,9,0,
		2,4,6,8,10,12,14,16,0,1,1,0,8,9,69,0,21,1,0,0,0,2,24,1,0,0,0,4,39,1,0,
		0,0,6,41,1,0,0,0,8,43,1,0,0,0,10,50,1,0,0,0,12,58,1,0,0,0,14,62,1,0,0,
		0,16,64,1,0,0,0,18,20,3,2,1,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,
		0,21,22,1,0,0,0,22,1,1,0,0,0,23,21,1,0,0,0,24,28,3,4,2,0,25,27,3,8,4,0,
		26,25,1,0,0,0,27,30,1,0,0,0,28,26,1,0,0,0,28,29,1,0,0,0,29,34,1,0,0,0,
		30,28,1,0,0,0,31,33,3,6,3,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,
		34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,38,5,1,0,0,38,3,1,0,0,0,39,
		40,5,10,0,0,40,5,1,0,0,0,41,42,7,0,0,0,42,7,1,0,0,0,43,48,5,7,0,0,44,45,
		5,2,0,0,45,46,3,10,5,0,46,47,5,3,0,0,47,49,1,0,0,0,48,44,1,0,0,0,48,49,
		1,0,0,0,49,9,1,0,0,0,50,55,3,12,6,0,51,52,5,4,0,0,52,54,3,12,6,0,53,51,
		1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,11,1,0,0,0,57,55,
		1,0,0,0,58,59,3,14,7,0,59,60,5,5,0,0,60,61,3,16,8,0,61,13,1,0,0,0,62,63,
		5,10,0,0,63,15,1,0,0,0,64,69,5,10,0,0,65,66,5,6,0,0,66,68,5,10,0,0,67,
		65,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,17,1,0,0,0,71,
		69,1,0,0,0,6,21,28,34,48,55,69
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
