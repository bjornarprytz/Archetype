schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

"The player of the game"
type IPlayerFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  maxHandSize: Int!
  resources: Int!
  headQuarters: IStructureFront!
  deck: IDeckFront!
  hand: IHandFront!
}

"A node on the map"
type IMapNodeFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  units: [IUnitFront!]!
  neighbours: [IMapNodeFront!]!
  graveyard: IGraveyardFront!
  discardPile: IDiscardPileFront!
}

"A graveyard that contains dead creatures"
type IGraveyardFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  creatures: [ICreatureFront!]!
}

"Discard pile, where spent cards go"
type IDiscardPileFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  cards: [ICardFront!]!
}

"A stack of cards which replenishes the player's hand"
type IDeckFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  numberOfCards: Int!
}

"A hand of cards, only visible to the owner"
type IHandFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  cards: [ICardFront!]!
}

"An instance of a Structure"
type IStructureFront implements IUnitFront & IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  name: String!
  currentZone: StructureZoneUnion
  baseMetaData: UnitMetaData!
  maxHealth: Int!
  health: Int!
  maxDefense: Int!
  defense: Int!
  metaData: StructureMetaData!
}

"An instance of a Creature"
type ICreatureFront implements IUnitFront & IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  name: String!
  currentZone: CreatureZoneUnion
  baseMetaData: UnitMetaData!
  maxHealth: Int!
  health: Int!
  maxDefense: Int!
  defense: Int!
  metaData: CreatureMetaData!
  strength: Int!
  movement: Int!
}

"A card instance"
type ICardFront implements IGameAtomFront {
  guid: UUID!
  owner: IGameAtomFront!
  name: String!
  currentZone: CardZoneUnion
  metaData: CardMetaData!
  cost: Int!
  range: Int!
  targetDescriptors: [ITargetDescriptor!]!
  effectDescriptors: [IEffectDescriptor!]!
}

"Describes the target of an effect."
type ITargetDescriptor {
  typeId: String!
}

"Describes an effect"
type IEffectDescriptor {
  affected: IAffected!
  keyword: String!
  operands: [IOperand!]!
}

type IAffected {
  value: AffectedUnionType
}

type IOperand {
  value: OperandValueUnion
}

"Immediate value"
type IImmediateValue {
  value: String!
}

"An accessor of a target, or one of its properties"
type ITargetProperty {
  typeId: String!
  targetIndex: Int!
  propertyPath: String!
}

"An accessor of a context property"
type IContextProperty {
  propertyPath: String!
}

"A property that is derived from some aggregate on the context"
type IAggregateProperty {
  description: String!
  propertyPath: String!
}

"A historic event"
type IHistoryEntry {
  results: [ResultUnion]
}

"Results of an event"
type IEffectResultOfInt32 {
  isNull: Boolean!
  verb: String!
  affected: AtomUnion
  intResult: Int!
}

"Results of an event"
type IEffectResultOfIGameAtomFront {
  isNull: Boolean!
  verb: String!
  affected: AtomUnion
  atomResult: AtomUnion
}

"The root object of actionable game state"
type IGameStateFront {
  player: IPlayerFront!
  map: IMapFront!
}

"A graph of map nodes"
type IMapFront {
  nodes: [IMapNodeFront!]!
}

"Collection of all available sets"
type IProtoPoolFront {
  sets: [ISetFront!]!
}

"A set of proto data which share some themes"
type ISetFront {
  name: String!
  cards: [ICardProtoDataFront!]!
  creatures: [ICreatureProtoDataFront!]!
  structures: [IStructureProtoDataFront!]!
}

"Blueprint for creating Card instances"
type ICardProtoDataFront {
  name: String!
  cost: Int!
  range: Int!
  metaData: CardMetaData!
  targetDescriptors: [ITargetDescriptor!]!
  effectDescriptors: [IEffectDescriptor!]!
}

"Blueprint for creating Structure instances"
type IStructureProtoDataFront {
  name: String!
  metaData: StructureMetaData!
  effectDescriptors: [IEffectDescriptor!]!
}

"Blueprint for creating Creature instances"
type ICreatureProtoDataFront {
  movement: Int!
  strength: Int!
  metaData: CreatureMetaData!
}

union AtomUnion = ICardFront | ICreatureFront | IDeckFront | IDiscardPileFront | IGraveyardFront | IHandFront | IMapNodeFront | IPlayerFront | IStructureFront

union ResultUnion = IEffectResultOfInt32 | IEffectResultOfIGameAtomFront

union StructureZoneUnion = IMapNodeFront

union CreatureZoneUnion = IMapNodeFront | IGraveyardFront

union CardZoneUnion = IDiscardPileFront | IHandFront | IDeckFront

union AffectedUnionType = ITargetProperty | IContextProperty

union OperandValueUnion = IImmediateValue | ITargetProperty | IContextProperty | IAggregateProperty

type Queries {
  gameState: IGameStateFront!
  protoPool: IProtoPoolFront!
}

type Mutations {
  startGame: StartGamePayload!
  playCard(playCardInput: PlayCardInput!): PlayCardPayload!
}

type Subscriptions {
  onGameStarted: StartGamePayload!
  onCardPlayed: PlayCardPayload!
}

scalar UUID

interface IGameAtomFront {
  owner: IGameAtomFront!
  guid: UUID!
}

interface IUnitFront {
  baseMetaData: UnitMetaData!
  maxHealth: Int!
  health: Int!
  maxDefense: Int!
  defense: Int!
  owner: IGameAtomFront!
  guid: UUID!
}

type UnitMetaData {
  setName: String!
  imageUri: String!
  level: Int!
}

type StructureMetaData {
  setName: String!
  imageUri: String!
  level: Int!
}

type CreatureMetaData {
  setName: String!
  imageUri: String!
  level: Int!
}

type CardMetaData {
  setName: String!
  rarity: CardRarity!
  color: CardColor!
  imageUri: String!
}

enum CardColor {
  WHITE
  BLUE
  BLACK
  RED
  GREEN
}

enum CardRarity {
  COMMON
  UNCOMMON
  RARE
  MYTHIC
}

input PlayCardInput {
  cardGuid: UUID!
  whenceNodeGuid: UUID!
  targetGuids: [UUID!]!
}

type PlayCardPayload {
  events: [IHistoryEntry!]!
}

type StartGamePayload {
  gameState: IGameStateFront!
}