// <auto-generated/>
#nullable enable

namespace Archetype.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameStateResult : global::System.IEquatable<GetGameStateResult>, IGetGameStateResult
    {
        public GetGameStateResult(global::Archetype.Client.IGetGameState_GameState gameState)
        {
            GameState = gameState;
        }

        public global::Archetype.Client.IGetGameState_GameState GameState { get; }

        public virtual global::System.Boolean Equals(GetGameStateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GameState.Equals(other.GameState));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameStateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GameState.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_GameStateData : global::System.IEquatable<GetGameState_GameState_GameStateData>, IGetGameState_GameState_GameStateData
    {
        public GetGameState_GameState_GameStateData(global::Archetype.Client.IGetGameState_GameState_Player? player, global::Archetype.Client.IGetGameState_GameState_Map? map)
        {
            Player = player;
            Map = map;
        }

        public global::Archetype.Client.IGetGameState_GameState_Player? Player { get; }

        public global::Archetype.Client.IGetGameState_GameState_Map? Map { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_GameStateData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Player is null && other.Player is null) || Player != null && Player.Equals(other.Player))) && ((Map is null && other.Map is null) || Map != null && Map.Equals(other.Map));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_GameStateData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Player != null)
                {
                    hash ^= 397 * Player.GetHashCode();
                }

                if (Map != null)
                {
                    hash ^= 397 * Map.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Player_PlayerData : global::System.IEquatable<GetGameState_GameState_Player_PlayerData>, IGetGameState_GameState_Player_PlayerData
    {
        public GetGameState_GameState_Player_PlayerData(global::System.Int32 resources, global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Player_Deck?>? deck)
        {
            Resources = resources;
            Deck = deck;
        }

        public global::System.Int32 Resources { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Player_Deck?>? Deck { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Player_PlayerData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Resources == other.Resources) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Deck, other.Deck);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Player_PlayerData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Resources.GetHashCode();
                if (Deck != null)
                {
                    foreach (var Deck_elm in Deck)
                    {
                        if (Deck_elm != null)
                        {
                            hash ^= 397 * Deck_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_MapData : global::System.IEquatable<GetGameState_GameState_Map_MapData>, IGetGameState_GameState_Map_MapData
    {
        public GetGameState_GameState_Map_MapData(global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Map_MapData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Map_MapData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Player_Deck_CardInstance : global::System.IEquatable<GetGameState_GameState_Player_Deck_CardInstance>, IGetGameState_GameState_Player_Deck_CardInstance
    {
        public GetGameState_GameState_Player_Deck_CardInstance(global::Archetype.Client.IGetGameState_GameState_Player_Deck_MetaData? metaData)
        {
            MetaData = metaData;
        }

        public global::Archetype.Client.IGetGameState_GameState_Player_Deck_MetaData? MetaData { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Player_Deck_CardInstance? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MetaData is null && other.MetaData is null) || MetaData != null && MetaData.Equals(other.MetaData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Player_Deck_CardInstance)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MetaData != null)
                {
                    hash ^= 397 * MetaData.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_MapNodeData : global::System.IEquatable<GetGameState_GameState_Map_Nodes_MapNodeData>, IGetGameState_GameState_Map_Nodes_MapNodeData
    {
        public GetGameState_GameState_Map_Nodes_MapNodeData(global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>? neighbours)
        {
            Neighbours = neighbours;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>? Neighbours { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Map_Nodes_MapNodeData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Neighbours, other.Neighbours));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Map_Nodes_MapNodeData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Neighbours != null)
                {
                    foreach (var Neighbours_elm in Neighbours)
                    {
                        if (Neighbours_elm != null)
                        {
                            hash ^= 397 * Neighbours_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Player_Deck_MetaData_CardMetaData : global::System.IEquatable<GetGameState_GameState_Player_Deck_MetaData_CardMetaData>, IGetGameState_GameState_Player_Deck_MetaData_CardMetaData
    {
        public GetGameState_GameState_Player_Deck_MetaData_CardMetaData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Player_Deck_MetaData_CardMetaData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Player_Deck_MetaData_CardMetaData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData : global::System.IEquatable<GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData>, IGetGameState_GameState_Map_Nodes_Neighbours_MapNodeData
    {
        public GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData(global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>? cards)
        {
            Cards = cards;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>? Cards { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Cards, other.Cards));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Cards != null)
                {
                    foreach (var Cards_elm in Cards)
                    {
                        if (Cards_elm != null)
                        {
                            hash ^= 397 * Cards_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance : global::System.IEquatable<GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance>, IGetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance
    {
        public GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance(global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? metaData)
        {
            MetaData = metaData;
        }

        public global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? MetaData { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MetaData is null && other.MetaData is null) || MetaData != null && MetaData.Equals(other.MetaData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MetaData != null)
                {
                    hash ^= 397 * MetaData.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData : global::System.IEquatable<GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData>, IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData
    {
        public GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameStateResult
    {
        public global::Archetype.Client.IGetGameState_GameState GameState { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState
    {
        public global::Archetype.Client.IGetGameState_GameState_Player? Player { get; }

        public global::Archetype.Client.IGetGameState_GameState_Map? Map { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_GameStateData : IGetGameState_GameState
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Player
    {
        public global::System.Int32 Resources { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Player_Deck?>? Deck { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Player_PlayerData : IGetGameState_GameState_Player
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_MapData : IGetGameState_GameState_Map
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Player_Deck
    {
        public global::Archetype.Client.IGetGameState_GameState_Player_Deck_MetaData? MetaData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Player_Deck_CardInstance : IGetGameState_GameState_Player_Deck
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>? Neighbours { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_MapNodeData : IGetGameState_GameState_Map_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Player_Deck_MetaData
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Player_Deck_MetaData_CardMetaData : IGetGameState_GameState_Player_Deck_MetaData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_Neighbours
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>? Cards { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_Neighbours_MapNodeData : IGetGameState_GameState_Map_Nodes_Neighbours
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_Neighbours_Cards
    {
        public global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? MetaData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance : IGetGameState_GameState_Map_Nodes_Neighbours_Cards
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData : IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData
    {
    }

    /// <summary>
    /// Represents the operation service of the GetGameState GraphQL operation
    /// <code>
    /// query GetGameState {
    ///   gameState {
    ///     __typename
    ///     player {
    ///       __typename
    ///       resources
    ///       deck {
    ///         __typename
    ///         metaData {
    ///           __typename
    ///           name
    ///         }
    ///         ... on CardInstance {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     map {
    ///       __typename
    ///       nodes {
    ///         __typename
    ///         neighbours {
    ///           __typename
    ///           cards {
    ///             __typename
    ///             metaData {
    ///               __typename
    ///               name
    ///             }
    ///             ... on CardInstance {
    ///               id
    ///             }
    ///           }
    ///           ... on MapNodeData {
    ///             id
    ///           }
    ///         }
    ///         ... on MapNodeData {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameStateQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGameStateQueryDocument()
        {
        }

        public static GetGameStateQueryDocument Instance { get; } = new GetGameStateQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x64, 0x65, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6d, 0x61, 0x70, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2a4b448247eb33023a1cca9676960b08");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGameState GraphQL operation
    /// <code>
    /// query GetGameState {
    ///   gameState {
    ///     __typename
    ///     player {
    ///       __typename
    ///       resources
    ///       deck {
    ///         __typename
    ///         metaData {
    ///           __typename
    ///           name
    ///         }
    ///         ... on CardInstance {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     map {
    ///       __typename
    ///       nodes {
    ///         __typename
    ///         neighbours {
    ///           __typename
    ///           cards {
    ///             __typename
    ///             metaData {
    ///               __typename
    ///               name
    ///             }
    ///             ... on CardInstance {
    ///               id
    ///             }
    ///           }
    ///           ... on MapNodeData {
    ///             id
    ///           }
    ///         }
    ///         ... on MapNodeData {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameStateQuery : global::Archetype.Client.IGetGameStateQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGameStateResult> _operationExecutor;
        public GetGameStateQuery(global::StrawberryShake.IOperationExecutor<IGetGameStateResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGameStateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGameStateResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGameStateResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGameStateQueryDocument.Instance.Hash.Value, name: "GetGameState", document: GetGameStateQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGameState GraphQL operation
    /// <code>
    /// query GetGameState {
    ///   gameState {
    ///     __typename
    ///     player {
    ///       __typename
    ///       resources
    ///       deck {
    ///         __typename
    ///         metaData {
    ///           __typename
    ///           name
    ///         }
    ///         ... on CardInstance {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     map {
    ///       __typename
    ///       nodes {
    ///         __typename
    ///         neighbours {
    ///           __typename
    ///           cards {
    ///             __typename
    ///             metaData {
    ///               __typename
    ///               name
    ///             }
    ///             ... on CardInstance {
    ///               id
    ///             }
    ///           }
    ///           ... on MapNodeData {
    ///             id
    ///           }
    ///         }
    ///         ... on MapNodeData {
    ///           id
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IGetGameStateQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGameStateResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGameStateResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the ArchetypeGraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ArchetypeGraphQLClient : global::Archetype.Client.IArchetypeGraphQLClient
    {
        private readonly global::Archetype.Client.IGetGameStateQuery _getGameState;
        public ArchetypeGraphQLClient(global::Archetype.Client.IGetGameStateQuery getGameState)
        {
            _getGameState = getGameState ?? throw new global::System.ArgumentNullException(nameof(getGameState));
        }

        public static global::System.String ClientName => "ArchetypeGraphQLClient";
        public global::Archetype.Client.IGetGameStateQuery GetGameState => _getGameState;
    }

    /// <summary>
    /// Represents the ArchetypeGraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public interface IArchetypeGraphQLClient
    {
        global::Archetype.Client.IGetGameStateQuery GetGameState { get; }
    }
}

namespace Archetype.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CardInstanceEntity
    {
        public CardInstanceEntity(global::Archetype.Client.State.CardMetaDataData? metaData = default !)
        {
            MetaData = metaData;
        }

        public global::Archetype.Client.State.CardMetaDataData? MetaData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class MapNodeDataEntity
    {
        public MapNodeDataEntity(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? neighbours = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? cards = default !)
        {
            Neighbours = neighbours;
            Cards = cards;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Neighbours { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Cards { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameStateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Archetype.Client.GetGameStateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Player_Deck_CardInstance> _getGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_MapNodeData> _getGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData> _getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance> _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper;
        public GetGameStateResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Player_Deck_CardInstance> getGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_MapNodeData> getGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData> getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance> getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper = getGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper));
            _getGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper = getGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper));
            _getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper = getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper));
            _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper = getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Archetype.Client.IGetGameStateResult);
        public GetGameStateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGameStateResultInfo info)
            {
                return new GetGameStateResult(MapNonNullableIGetGameState_GameState(info.GameState, snapshot));
            }

            throw new global::System.ArgumentException("GetGameStateResultInfo expected.");
        }

        private global::Archetype.Client.IGetGameState_GameState MapNonNullableIGetGameState_GameState(global::Archetype.Client.State.GameStateDataData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetGameState_GameState returnValue = default !;
            if (data.__typename.Equals("GameStateData", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetGameState_GameState_GameStateData(MapIGetGameState_GameState_Player(data.Player, snapshot), MapIGetGameState_GameState_Map(data.Map, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Archetype.Client.IGetGameState_GameState_Player? MapIGetGameState_GameState_Player(global::Archetype.Client.State.PlayerDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Player returnValue = default !;
            if (data?.__typename.Equals("PlayerData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Player_PlayerData(data.Resources ?? throw new global::System.ArgumentNullException(), MapIGetGameState_GameState_Player_DeckArray(data.Deck, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Player_Deck?>? MapIGetGameState_GameState_Player_DeckArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var cardInstances = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Player_Deck?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                cardInstances.Add(MapIGetGameState_GameState_Player_Deck(child, snapshot));
            }

            return cardInstances;
        }

        private global::Archetype.Client.IGetGameState_GameState_Player_Deck? MapIGetGameState_GameState_Player_Deck(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CardInstance", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.CardInstanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.IGetGameState_GameState_Player_Deck_MetaData? MapIGetGameState_GameState_Player_Deck_MetaData(global::Archetype.Client.State.CardMetaDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Player_Deck_MetaData returnValue = default !;
            if (data?.__typename.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Player_Deck_MetaData_CardMetaData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map? MapIGetGameState_GameState_Map(global::Archetype.Client.State.MapDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Map returnValue = default !;
            if (data?.__typename.Equals("MapData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Map_MapData(MapIGetGameState_GameState_Map_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes?>? MapIGetGameState_GameState_Map_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var mapNodeDatas = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Map_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                mapNodeDatas.Add(MapIGetGameState_GameState_Map_Nodes(child, snapshot));
            }

            return mapNodeDatas;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes? MapIGetGameState_GameState_Map_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("MapNodeData", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.MapNodeDataEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>? MapIGetGameState_GameState_Map_Nodes_NeighboursArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var mapNodeDatas = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                mapNodeDatas.Add(MapIGetGameState_GameState_Map_Nodes_Neighbours(child, snapshot));
            }

            return mapNodeDatas;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours? MapIGetGameState_GameState_Map_Nodes_Neighbours(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("MapNodeData", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.MapNodeDataEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>? MapIGetGameState_GameState_Map_Nodes_Neighbours_CardsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var cardInstances = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                cardInstances.Add(MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards(child, snapshot));
            }

            return cardInstances;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CardInstance", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.CardInstanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::Archetype.Client.State.CardMetaDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData returnValue = default !;
            if (data?.__typename.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameStateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGameStateResultInfo(global::Archetype.Client.State.GameStateDataData gameState, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GameState = gameState;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Archetype.Client.State.GameStateDataData GameState { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGameStateResultInfo(GameState, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper : global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Player_Deck_CardInstance>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetGameState_GameState_Player_Deck_CardInstance Map(global::Archetype.Client.State.CardInstanceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetGameState_GameState_Player_Deck_CardInstance(MapIGetGameState_GameState_Player_Deck_MetaData(entity.MetaData, snapshot));
        }

        private global::Archetype.Client.IGetGameState_GameState_Player_Deck_MetaData? MapIGetGameState_GameState_Player_Deck_MetaData(global::Archetype.Client.State.CardMetaDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Player_Deck_MetaData returnValue = default !;
            if (data?.__typename.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Player_Deck_MetaData_CardMetaData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper : global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_MapNodeData>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData> _getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance> _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper;
        public GetGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData> getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance> getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper = getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper));
            _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper = getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper));
        }

        public GetGameState_GameState_Map_Nodes_MapNodeData Map(global::Archetype.Client.State.MapNodeDataEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetGameState_GameState_Map_Nodes_MapNodeData(MapIGetGameState_GameState_Map_Nodes_NeighboursArray(entity.Neighbours, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>? MapIGetGameState_GameState_Map_Nodes_NeighboursArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var mapNodeDatas = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                mapNodeDatas.Add(MapIGetGameState_GameState_Map_Nodes_Neighbours(child, snapshot));
            }

            return mapNodeDatas;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours? MapIGetGameState_GameState_Map_Nodes_Neighbours(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("MapNodeData", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.MapNodeDataEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>? MapIGetGameState_GameState_Map_Nodes_Neighbours_CardsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var cardInstances = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                cardInstances.Add(MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards(child, snapshot));
            }

            return cardInstances;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CardInstance", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.CardInstanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::Archetype.Client.State.CardMetaDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData returnValue = default !;
            if (data?.__typename.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper : global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance> _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper;
        public GetGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance> getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper = getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper));
        }

        public GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData Map(global::Archetype.Client.State.MapNodeDataEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData(MapIGetGameState_GameState_Map_Nodes_Neighbours_CardsArray(entity.Cards, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>? MapIGetGameState_GameState_Map_Nodes_Neighbours_CardsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var cardInstances = new global::System.Collections.Generic.List<global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                cardInstances.Add(MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards(child, snapshot));
            }

            return cardInstances;
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CardInstance", global::System.StringComparison.Ordinal))
            {
                return _getGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper.Map(snapshot.GetEntity<global::Archetype.Client.State.CardInstanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::Archetype.Client.State.CardMetaDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData returnValue = default !;
            if (data?.__typename.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper : global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance Map(global::Archetype.Client.State.CardInstanceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance(MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(entity.MetaData, snapshot));
        }

        private global::Archetype.Client.IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData? MapIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::Archetype.Client.State.CardMetaDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData returnValue = default !;
            if (data?.__typename.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData_CardMetaData(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GetGameStateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Archetype.Client.IGetGameStateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Archetype.Client.IGetGameStateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetGameStateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Archetype.Client.IGetGameStateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGameStateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGameStateResult Result, GetGameStateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetGameStateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGameStateResult, GetGameStateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Archetype.Client.State.GameStateDataData gameStateId = default !;
            _entityStore.Update(session =>
            {
                gameStateId = DeserializeNonNullableIGetGameState_GameState(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gameState"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGameStateResultInfo(gameStateId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Archetype.Client.State.GameStateDataData DeserializeNonNullableIGetGameState_GameState(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GameStateData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Archetype.Client.State.GameStateDataData(typename, player: DeserializeIGetGameState_GameState_Player(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "player"), entityIds), map: DeserializeIGetGameState_GameState_Map(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "map"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.State.PlayerDataData? DeserializeIGetGameState_GameState_Player(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PlayerData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Archetype.Client.State.PlayerDataData(typename, resources: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "resources")), deck: UpdateIGetGameState_GameState_Player_DeckEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deck"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetGameState_GameState_Player_DeckEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var cardInstances = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                cardInstances.Add(UpdateIGetGameState_GameState_Player_DeckEntity(session, child, entityIds));
            }

            return cardInstances;
        }

        private global::StrawberryShake.EntityId? UpdateIGetGameState_GameState_Player_DeckEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CardInstance", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Archetype.Client.State.CardInstanceEntity? entity))
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.CardInstanceEntity(DeserializeIGetGameState_GameState_Player_Deck_MetaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metaData"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.CardInstanceEntity(DeserializeIGetGameState_GameState_Player_Deck_MetaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metaData"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.State.CardMetaDataData? DeserializeIGetGameState_GameState_Player_Deck_MetaData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Archetype.Client.State.CardMetaDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Archetype.Client.State.MapDataData? DeserializeIGetGameState_GameState_Map(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MapData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Archetype.Client.State.MapDataData(typename, nodes: UpdateIGetGameState_GameState_Map_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetGameState_GameState_Map_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var mapNodeDatas = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                mapNodeDatas.Add(UpdateIGetGameState_GameState_Map_NodesEntity(session, child, entityIds));
            }

            return mapNodeDatas;
        }

        private global::StrawberryShake.EntityId? UpdateIGetGameState_GameState_Map_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MapNodeData", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Archetype.Client.State.MapNodeDataEntity? entity))
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.MapNodeDataEntity(UpdateIGetGameState_GameState_Map_Nodes_NeighboursEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "neighbours"), entityIds), entity.Cards));
                }
                else
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.MapNodeDataEntity(UpdateIGetGameState_GameState_Map_Nodes_NeighboursEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "neighbours"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetGameState_GameState_Map_Nodes_NeighboursEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var mapNodeDatas = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                mapNodeDatas.Add(UpdateIGetGameState_GameState_Map_Nodes_NeighboursEntity(session, child, entityIds));
            }

            return mapNodeDatas;
        }

        private global::StrawberryShake.EntityId? UpdateIGetGameState_GameState_Map_Nodes_NeighboursEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MapNodeData", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Archetype.Client.State.MapNodeDataEntity? entity))
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.MapNodeDataEntity(entity.Neighbours, UpdateIGetGameState_GameState_Map_Nodes_Neighbours_CardsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cards"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.MapNodeDataEntity(default !, UpdateIGetGameState_GameState_Map_Nodes_Neighbours_CardsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cards"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetGameState_GameState_Map_Nodes_Neighbours_CardsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var cardInstances = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                cardInstances.Add(UpdateIGetGameState_GameState_Map_Nodes_Neighbours_CardsEntity(session, child, entityIds));
            }

            return cardInstances;
        }

        private global::StrawberryShake.EntityId? UpdateIGetGameState_GameState_Map_Nodes_Neighbours_CardsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CardInstance", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Archetype.Client.State.CardInstanceEntity? entity))
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.CardInstanceEntity(DeserializeIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metaData"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Archetype.Client.State.CardInstanceEntity(DeserializeIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metaData"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::Archetype.Client.State.CardMetaDataData? DeserializeIGetGameState_GameState_Map_Nodes_Neighbours_Cards_MetaData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CardMetaData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Archetype.Client.State.CardMetaDataData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class GameStateDataData
    {
        public GameStateDataData(global::System.String __typename, global::Archetype.Client.State.PlayerDataData? player = default !, global::Archetype.Client.State.MapDataData? map = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Player = player;
            Map = map;
        }

        public global::System.String __typename { get; }

        public global::Archetype.Client.State.PlayerDataData? Player { get; }

        public global::Archetype.Client.State.MapDataData? Map { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class PlayerDataData
    {
        public PlayerDataData(global::System.String __typename, global::System.Int32? resources = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? deck = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Resources = resources;
            Deck = deck;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Resources { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Deck { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class MapDataData
    {
        public MapDataData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class CardMetaDataData
    {
        public CardMetaDataData(global::System.String __typename, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ArchetypeGraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "CardInstance" => ParseCardInstanceEntityId(obj, __typename),
                "MapNodeData" => ParseMapNodeDataEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "CardInstance" => FormatCardInstanceEntityId(entityId),
                "MapNodeData" => FormatMapNodeDataEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseCardInstanceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCardInstanceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMapNodeDataEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMapNodeDataEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public partial class ArchetypeGraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public ArchetypeGraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.2.2.0")]
    public static partial class ArchetypeGraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Archetype.Client.State.ArchetypeGraphQLClientStoreAccessor> AddArchetypeGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Archetype.Client.State.ArchetypeGraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Archetype.Client.GetGameStateQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Archetype.Client.ArchetypeGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Archetype.Client.IArchetypeGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Archetype.Client.State.ArchetypeGraphQLClientStoreAccessor>("ArchetypeGraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("ArchetypeGraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, global::Archetype.Client.GetGameState_GameState_Player_Deck_CardInstance>, global::Archetype.Client.State.GetGameState_GameState_Player_Deck_CardInstanceFromCardInstanceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, global::Archetype.Client.GetGameState_GameState_Map_Nodes_MapNodeData>, global::Archetype.Client.State.GetGameState_GameState_Map_Nodes_MapNodeDataFromMapNodeDataEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.MapNodeDataEntity, global::Archetype.Client.GetGameState_GameState_Map_Nodes_Neighbours_MapNodeData>, global::Archetype.Client.State.GetGameState_GameState_Map_Nodes_Neighbours_MapNodeDataFromMapNodeDataEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Archetype.Client.State.CardInstanceEntity, global::Archetype.Client.GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstance>, global::Archetype.Client.State.GetGameState_GameState_Map_Nodes_Neighbours_Cards_CardInstanceFromCardInstanceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Archetype.Client.IGetGameStateResult>, global::Archetype.Client.State.GetGameStateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Archetype.Client.IGetGameStateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Archetype.Client.IGetGameStateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Archetype.Client.IGetGameStateResult>, global::Archetype.Client.State.GetGameStateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Archetype.Client.IGetGameStateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Archetype.Client.IGetGameStateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Archetype.Client.IGetGameStateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Archetype.Client.GetGameStateQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Archetype.Client.IGetGameStateQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Archetype.Client.GetGameStateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Archetype.Client.State.ArchetypeGraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Archetype.Client.ArchetypeGraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Archetype.Client.IArchetypeGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Archetype.Client.ArchetypeGraphQLClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
